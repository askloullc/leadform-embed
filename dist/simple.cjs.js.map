{"version":3,"sources":["../src/simple.ts","../src/simple-form.tsx","../src/types.ts"],"sourcesContent":["/**\n * Simple Lead Form Component\n *\n * A lightweight React component that renders a lead capture form directly\n * without any modal or floating trigger behavior. Perfect for embedding\n * directly into your pages where you control the visibility.\n */\n\nexport { SimpleLeadForm } from './simple-form'\nexport type { SimpleLeadFormProps } from './simple-form'\nexport type { LeadFormConfig, LeadFormData } from './types'\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport {\n  CaptureLeadPayload,\n  ConsentEvent,\n  consentText,\n  DeviceFingerprint,\n  generateIdempotencyKey,\n  LeadFormConfig,\n  LeadFormData,\n  marketingConsentText,\n  validateEmail,\n  validatePhone,\n} from './types'\n\n// Simplified component props\nexport interface SimpleLeadFormProps extends Partial<LeadFormConfig> {\n  siteSlug: string\n  sitePublicKey: string\n  onSubmit?: (data: { data: LeadFormData; result: any }) => void\n  onError?: (error: { type: string; message: string; error?: any }) => void\n  className?: string\n  style?: React.CSSProperties\n  showSuccessMessage?: boolean\n  dataTestId?: string\n  mockSubmit?: boolean\n}\n\n// Default configuration\nconst DEFAULT_CONFIG: Omit<LeadFormConfig, 'siteSlug' | 'sitePublicKey'> = {\n  theme: 'auto',\n  fields: ['name', 'email', 'message'],\n  title: 'Get in touch',\n  subtitle:\n    \"We'd love to hear from you. Send us a message and we'll respond as soon as possible.\",\n  buttonText: 'Send message',\n  successMessage: \"Thank you! We'll get back to you soon.\",\n  requireConsent: true,\n  requireMarketingConsent: false,\n  accentColorHex: '#3b82f6',\n  nameFieldLabel: 'Name',\n  emailFieldLabel: 'Email',\n  companyFieldLabel: 'Company',\n  phoneFieldLabel: 'Phone',\n  messageFieldLabel: 'Message',\n  nameFieldPlaceholder: 'Your name',\n  emailFieldPlaceholder: 'your@email.com',\n  companyFieldPlaceholder: 'Your company',\n  phoneFieldPlaceholder: 'Your phone number',\n  messageFieldPlaceholder: 'Your message...',\n  successTitle: 'Thank you!',\n  successSubtitle: \"We'll get back to you as soon as possible.\",\n  apiEndpoint: 'https://api.loubase.com/v1/leads',\n}\n\n/**\n * SimpleLeadForm - A React component that renders a lead capture form directly\n *\n * This is a simplified version that renders the form inline without any modal\n * or floating behavior. The parent component is responsible for showing/hiding.\n *\n * @example\n * ```tsx\n * import { SimpleLeadForm } from '@loubase/leadform-embed/simple'\n *\n * function ContactPage() {\n *   return (\n *     <div className=\"max-w-md mx-auto\">\n *       <SimpleLeadForm\n *         siteId=\"your-site-id\"\n *         title=\"Contact Us\"\n *         fields={['name', 'email', 'message']}\n *         onSubmit={(data) => console.log('Form submitted:', data)}\n *         onError={(error) => console.error('Form error:', error)}\n *       />\n *     </div>\n *   )\n * }\n * ```\n */\nexport const SimpleLeadForm: React.FC<SimpleLeadFormProps> = ({\n  siteSlug,\n  sitePublicKey,\n  onSubmit,\n  onError,\n  className = '',\n  style,\n  showSuccessMessage = true,\n  dataTestId = 'simple-leadform',\n  mockSubmit = false,\n  ...configOverrides\n}) => {\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [isSuccess, setIsSuccess] = useState(false)\n  const [fieldErrors, setFieldErrors] = useState<Record<string, string>>({})\n  const [formData, setFormData] = useState<LeadFormData>({})\n  const [showMarketingConsent, setShowMarketingConsent] = useState(false)\n  const [submissionStartTime, setSubmissionStartTime] = useState<number | null>(\n    null\n  )\n  const stylesInjectedRef = useRef(false)\n\n  // Merge default config with overrides\n  const config: LeadFormConfig = {\n    ...DEFAULT_CONFIG,\n    siteSlug,\n    sitePublicKey,\n    ...configOverrides,\n  }\n\n  // Inject styles only once\n  useEffect(() => {\n    if (\n      stylesInjectedRef.current ||\n      document.getElementById('simple-leadform-styles')\n    ) {\n      return\n    }\n\n    const style = document.createElement('style')\n    style.id = 'simple-leadform-styles'\n    const accentColor = normalizeColor(config.accentColorHex) || '#3b82f6'\n\n    style.textContent = `\n      .simple-leadform {\n        --leadform-primary: ${accentColor};\n        --leadform-primary-foreground: #ffffff;\n        --leadform-background: #ffffff;\n        --leadform-foreground: #0f172a;\n        --leadform-muted: #f8fafc;\n        --leadform-muted-foreground: #64748b;\n        --leadform-border: #e2e8f0;\n        --leadform-input: #ffffff;\n        --leadform-ring: var(--leadform-primary);\n        --leadform-destructive: #ef4444;\n        --leadform-destructive-foreground: #ffffff;\n        \n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n        font-size: 14px;\n        line-height: 1.5;\n        color: var(--leadform-foreground);\n        box-sizing: border-box;\n        background: var(--leadform-background);\n        border: 1px solid var(--leadform-border);\n        border-radius: 8px;\n        padding: 24px;\n        max-width: 100%;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        .simple-leadform[data-theme=\"auto\"] {\n          --leadform-background: #0f172a;\n          --leadform-foreground: #f8fafc;\n          --leadform-muted: #1e293b;\n          --leadform-muted-foreground: #94a3b8;\n          --leadform-border: #334155;\n          --leadform-input: #1e293b;\n        }\n      }\n\n      .simple-leadform[data-theme=\"dark\"] {\n        --leadform-background: #0f172a;\n        --leadform-foreground: #f8fafc;\n        --leadform-muted: #1e293b;\n        --leadform-muted-foreground: #94a3b8;\n        --leadform-border: #334155;\n        --leadform-input: #1e293b;\n      }\n\n      .simple-leadform * {\n        box-sizing: border-box;\n      }\n\n      .simple-leadform-header {\n        margin-bottom: 24px;\n        text-align: left;\n      }\n\n      .simple-leadform-title {\n        font-size: 18px;\n        font-weight: 600;\n        margin: 0 0 8px 0;\n        color: var(--leadform-foreground);\n      }\n\n      .simple-leadform-subtitle {\n        font-size: 14px;\n        color: var(--leadform-muted-foreground);\n        margin: 0;\n        line-height: 1.4;\n      }\n\n      .simple-leadform-form {\n        display: flex;\n        flex-direction: column;\n        gap: 20px;\n      }\n\n      .simple-leadform-field {\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n      }\n\n      .simple-leadform-field.hidden {\n        position: absolute;\n        left: -9999px;\n        opacity: 0;\n        pointer-events: none;\n      }\n\n      .simple-leadform-label {\n        font-size: 14px;\n        font-weight: 500;\n        color: var(--leadform-foreground);\n      }\n\n      .simple-leadform-input {\n        padding: 12px 16px;\n        border: 1px solid var(--leadform-border);\n        border-radius: 8px;\n        background: var(--leadform-input);\n        color: var(--leadform-foreground);\n        font-size: 14px;\n        transition: border-color 0.2s ease, box-shadow 0.2s ease;\n      }\n\n      .simple-leadform-input:focus {\n        outline: none;\n        border-color: var(--leadform-ring);\n        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n      }\n\n      .simple-leadform-textarea {\n        resize: vertical;\n        min-height: 80px;\n      }\n\n      .simple-leadform-checkbox-field {\n        flex-direction: row;\n        align-items: flex-start;\n        gap: 12px;\n      }\n\n      .simple-leadform-checkbox {\n        margin-top: 2px;\n        width: 16px;\n        height: 16px;\n      }\n\n      .simple-leadform-checkbox-label {\n        font-size: 12px;\n        color: var(--leadform-muted-foreground);\n        line-height: 1.4;\n      }\n\n      .simple-leadform-submit {\n        background: var(--leadform-primary);\n        color: var(--leadform-primary-foreground);\n        border: none;\n        padding: 12px 24px;\n        border-radius: 6px;\n        font-size: 14px;\n        font-weight: 500;\n        cursor: pointer;\n        transition: background-color 0.2s ease;\n        position: relative;\n        margin-top: 8px;\n      }\n\n      .simple-leadform-submit:hover:not(:disabled) {\n        filter: brightness(0.9);\n      }\n\n      .simple-leadform-submit:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n\n      .simple-leadform-submit-loading {\n        color: transparent;\n      }\n\n      .simple-leadform-spinner {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        width: 16px;\n        height: 16px;\n        border: 2px solid transparent;\n        border-top: 2px solid var(--leadform-primary-foreground);\n        border-radius: 50%;\n        animation: simple-leadform-spin 1s linear infinite;\n      }\n\n      @keyframes simple-leadform-spin {\n        0% { transform: translate(-50%, -50%) rotate(0deg); }\n        100% { transform: translate(-50%, -50%) rotate(360deg); }\n      }\n\n      .simple-leadform-success {\n        text-align: center;\n        padding: 20px;\n        color: var(--leadform-foreground);\n      }\n\n      .simple-leadform-error {\n        color: var(--leadform-destructive);\n        font-size: 12px;\n        margin-top: 4px;\n      }\n    `\n    document.head.appendChild(style)\n    stylesInjectedRef.current = true\n  }, [config.accentColorHex, config.theme])\n\n  // Handle form data changes\n  const handleInputChange = useCallback(\n    (field: string, value: string) => {\n      setFormData(prev => ({ ...prev, [field]: value }))\n\n      // Clear field error when user starts typing\n      if (fieldErrors[field]) {\n        setFieldErrors(prev => ({ ...prev, [field]: '' }))\n      }\n\n      // Show marketing consent when valid email is entered\n      if (field === 'email' && config.requireMarketingConsent) {\n        const isValidEmail = validateEmail(value)\n        setShowMarketingConsent(isValidEmail)\n      }\n    },\n    [fieldErrors, config.requireMarketingConsent]\n  )\n\n  // Handle form submission\n  const handleSubmit = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault()\n\n      if (isSubmitting) return\n\n      // Basic validation\n      const errors: Record<string, string> = {}\n      const fieldMap = getFieldMap(config)\n\n      config.fields.forEach(fieldName => {\n        const field = fieldMap[fieldName]\n        if (field?.required && !formData[fieldName]?.trim()) {\n          errors[fieldName] = `${field.label} is required`\n        }\n      })\n\n      // Check if either email or phone is present when both fields are in the form\n      const hasEmailField = config.fields.includes('email')\n      const hasPhoneField = config.fields.includes('phone')\n\n      if (hasEmailField && !hasPhoneField) {\n        if (!formData.email?.trim()) {\n          errors.email = 'Email is required'\n        } else {\n          const isValidEmail = validateEmail(formData.email)\n          if (!isValidEmail) {\n            errors.email = 'Please enter a valid email address'\n          }\n        }\n      }\n      if (hasPhoneField && !hasEmailField) {\n        if (!formData.phone?.trim()) {\n          errors.phone = 'Phone is required'\n        } else {\n          const isValidPhone = validatePhone(formData.phone)\n          if (!isValidPhone) {\n            errors.phone = 'Please enter a valid phone number'\n          }\n        }\n      }\n      if (hasEmailField && hasPhoneField) {\n        // neither filled\n        if (!formData.email?.trim() && !formData.phone?.trim()) {\n          errors.email = 'Email or phone is required'\n          errors.phone = 'Email or phone is required'\n          // both filled\n        } else if (formData.email?.trim() && formData.phone?.trim()) {\n          const isValidEmail = validateEmail(formData.email)\n          const isValidPhone = validatePhone(formData.phone)\n          if (!isValidEmail) {\n            errors.email = 'Please enter a valid email address'\n          }\n          if (!isValidPhone) {\n            errors.phone = 'Please enter a valid phone number'\n          }\n        } else if (formData.phone?.trim()) {\n          const isValidPhone = validatePhone(formData.phone)\n          if (!isValidPhone) {\n            errors.phone = 'Please enter a valid phone number'\n          }\n        } else if (formData.email?.trim()) {\n          const isValidEmail = validateEmail(formData.email)\n          if (!isValidEmail) {\n            errors.email = 'Please enter a valid email address'\n          }\n        }\n      }\n\n      // Check consent if required\n      if (config.requireConsent && formData.consent !== 'true') {\n        errors.consent = 'Consent is required'\n      }\n\n      if (Object.keys(errors).length > 0) {\n        setFieldErrors(errors)\n        return\n      }\n\n      setIsSubmitting(true)\n      setFieldErrors({})\n      setSubmissionStartTime(Date.now())\n\n      try {\n        const response = await submitFormData(\n          config,\n          formData,\n          submissionStartTime,\n          mockSubmit\n        )\n\n        if (showSuccessMessage) {\n          setIsSuccess(true)\n        }\n\n        onSubmit?.({ data: formData, result: response })\n      } catch (error) {\n        const errorData = {\n          type: 'submission',\n          message: 'Failed to submit form. Please try again.',\n          error,\n        }\n        onError?.(errorData)\n      } finally {\n        setIsSubmitting(false)\n        setSubmissionStartTime(null)\n      }\n    },\n    [\n      config,\n      formData,\n      isSubmitting,\n      onSubmit,\n      onError,\n      showSuccessMessage,\n      submissionStartTime,\n    ]\n  )\n\n  // Render success state\n  if (isSuccess && showSuccessMessage) {\n    return (\n      <div\n        className={`simple-leadform ${className}`}\n        data-theme={config.theme}\n        data-testid={`${dataTestId}-success`}\n        style={style}\n      >\n        <div className=\"simple-leadform-success\">\n          <svg\n            width=\"48\"\n            height=\"48\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            style={{ margin: '0 auto 16px', color: '#22c55e' }}\n            data-testid={`${dataTestId}-success-icon`}\n          >\n            <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n            <polyline points=\"22,4 12,14.01 9,11.01\"></polyline>\n          </svg>\n          <h3\n            style={{ margin: '0 0 8px 0' }}\n            data-testid={`${dataTestId}-success-title`}\n          >\n            {config.successTitle}\n          </h3>\n          <p\n            style={{\n              margin: '0',\n              color: 'var(--leadform-muted-foreground)',\n              fontSize: '14px',\n            }}\n            data-testid={`${dataTestId}-success-subtitle`}\n          >\n            {config.successSubtitle}\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div\n      className={`simple-leadform ${className}`}\n      data-theme={config.theme}\n      data-testid={dataTestId}\n      style={style}\n    >\n      {(config.title || config.subtitle) && (\n        <div\n          className=\"simple-leadform-header\"\n          data-testid={`${dataTestId}-header`}\n        >\n          {config.title && (\n            <h3\n              className=\"simple-leadform-title\"\n              data-testid={`${dataTestId}-title`}\n            >\n              {config.title}\n            </h3>\n          )}\n          {config.subtitle && (\n            <p\n              className=\"simple-leadform-subtitle\"\n              data-testid={`${dataTestId}-subtitle`}\n            >\n              {config.subtitle}\n            </p>\n          )}\n        </div>\n      )}\n      <form\n        className=\"simple-leadform-form\"\n        onSubmit={handleSubmit}\n        data-testid={`${dataTestId}-form`}\n      >\n        {renderFields(\n          config,\n          formData,\n          fieldErrors,\n          handleInputChange,\n          dataTestId\n        )}\n\n        {/* Honeypot field */}\n        <div\n          className=\"simple-leadform-field hidden\"\n          data-testid={`${dataTestId}-honeypot`}\n        >\n          <label\n            className=\"simple-leadform-label\"\n            htmlFor=\"simple-leadform-website\"\n          >\n            Website\n          </label>\n          <input\n            className=\"simple-leadform-input\"\n            type=\"text\"\n            name=\"website\"\n            id=\"simple-leadform-website\"\n            tabIndex={-1}\n            autoComplete=\"off\"\n          />\n        </div>\n\n        {renderConsentFields(\n          config,\n          formData,\n          fieldErrors,\n          handleInputChange,\n          showMarketingConsent,\n          dataTestId\n        )}\n\n        <button\n          type=\"submit\"\n          className={`simple-leadform-submit ${isSubmitting ? 'simple-leadform-submit-loading' : ''}`}\n          disabled={isSubmitting}\n          data-testid={`${dataTestId}-submit-button`}\n        >\n          <span\n            className=\"simple-leadform-submit-text\"\n            data-testid={`${dataTestId}-submit-text`}\n          >\n            {config.buttonText}\n          </span>\n          <div\n            className=\"simple-leadform-spinner\"\n            style={{ display: isSubmitting ? 'block' : 'none' }}\n            data-testid={`${dataTestId}-submit-spinner`}\n          />\n        </button>\n      </form>\n    </div>\n  )\n}\n\n// Helper functions\nfunction normalizeColor(input?: string): string | null {\n  if (!input) return null\n  // Allow only hex colors\n  if (/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(input)) {\n    return input\n  }\n  return null\n}\n\nfunction getFieldMap(\n  config: LeadFormConfig\n): Record<\n  string,\n  { label: string; type: string; placeholder: string; required: boolean }\n> {\n  return {\n    name: {\n      label: config.nameFieldLabel!,\n      type: 'text',\n      placeholder: config.nameFieldPlaceholder!,\n      required: true,\n    },\n    email: {\n      label: config.emailFieldLabel!,\n      type: 'email',\n      placeholder: config.emailFieldPlaceholder!,\n      required: true,\n    },\n    company: {\n      label: config.companyFieldLabel!,\n      type: 'text',\n      placeholder: config.companyFieldPlaceholder!,\n      required: false,\n    },\n    phone: {\n      label: config.phoneFieldLabel!,\n      type: 'tel',\n      placeholder: config.phoneFieldPlaceholder!,\n      required: false,\n    },\n    message: {\n      label: config.messageFieldLabel!,\n      type: 'textarea',\n      placeholder: config.messageFieldPlaceholder!,\n      required: false,\n    },\n  }\n}\n\nfunction renderFields(\n  config: LeadFormConfig,\n  formData: LeadFormData,\n  fieldErrors: Record<string, string>,\n  handleInputChange: (field: string, value: string) => void,\n  dataTestId: string\n) {\n  const fieldMap = getFieldMap(config)\n\n  return config.fields\n    .map(fieldName => {\n      const field = fieldMap[fieldName]\n      if (!field) return null\n\n      const isTextarea = field.type === 'textarea'\n      const fieldId = `simple-leadform-${fieldName}`\n      const value = formData[fieldName] || ''\n      const error = fieldErrors[fieldName]\n\n      const commonProps = {\n        name: fieldName,\n        id: fieldId,\n        placeholder: field.placeholder,\n        required: field.required,\n        value,\n        onChange: (\n          e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n        ) => handleInputChange(fieldName, e.target.value),\n      }\n\n      return (\n        <div\n          key={fieldName}\n          className=\"simple-leadform-field\"\n          data-testid={`${dataTestId}-field-${fieldName}`}\n        >\n          <label\n            className=\"simple-leadform-label\"\n            htmlFor={fieldId}\n            data-testid={`${dataTestId}-label-${fieldName}`}\n          >\n            {field.label}\n            {field.required ? ' *' : ''}\n          </label>\n          {isTextarea ? (\n            <textarea\n              {...commonProps}\n              className=\"simple-leadform-input simple-leadform-textarea\"\n              data-testid={`${dataTestId}-input-${fieldName}`}\n            />\n          ) : (\n            <input\n              {...commonProps}\n              type={field.type}\n              className=\"simple-leadform-input\"\n              data-testid={`${dataTestId}-input-${fieldName}`}\n            />\n          )}\n          {error && (\n            <div\n              className=\"simple-leadform-error\"\n              data-testid={`${dataTestId}-error-${fieldName}`}\n            >\n              {error}\n            </div>\n          )}\n        </div>\n      )\n    })\n    .filter(Boolean)\n}\n\nfunction renderConsentFields(\n  config: LeadFormConfig,\n  formData: LeadFormData,\n  fieldErrors: Record<string, string>,\n  handleInputChange: (field: string, value: string) => void,\n  showMarketingConsent: boolean,\n  dataTestId: string\n) {\n  const consentFields = []\n\n  // Required consent\n  if (config.requireConsent) {\n    const consentError = fieldErrors.consent\n    consentFields.push(\n      <div\n        key=\"consent\"\n        className=\"simple-leadform-field simple-leadform-checkbox-field\"\n        data-testid={`${dataTestId}-field-consent`}\n      >\n        <input\n          type=\"checkbox\"\n          id=\"simple-leadform-consent\"\n          name=\"consent\"\n          className=\"simple-leadform-checkbox\"\n          required\n          checked={formData.consent === 'true'}\n          onChange={e =>\n            handleInputChange('consent', e.target.checked ? 'true' : 'false')\n          }\n          data-testid={`${dataTestId}-checkbox-consent`}\n        />\n        <div style={{ flex: 1 }}>\n          <label\n            htmlFor=\"simple-leadform-consent\"\n            className=\"simple-leadform-checkbox-label\"\n            data-testid={`${dataTestId}-label-consent`}\n          >\n            {consentText}\n          </label>\n          {consentError && (\n            <div\n              className=\"simple-leadform-error\"\n              data-testid={`${dataTestId}-error-consent`}\n            >\n              {consentError}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  // Marketing consent\n  if (config.requireMarketingConsent && showMarketingConsent) {\n    consentFields.push(\n      <div\n        key=\"marketing-consent\"\n        className=\"simple-leadform-field simple-leadform-checkbox-field\"\n        data-testid={`${dataTestId}-field-marketing-consent`}\n      >\n        <input\n          type=\"checkbox\"\n          id=\"simple-leadform-marketing-consent\"\n          name=\"marketingConsent\"\n          className=\"simple-leadform-checkbox\"\n          checked={formData.marketingConsent === 'true'}\n          onChange={e =>\n            handleInputChange(\n              'marketingConsent',\n              e.target.checked ? 'true' : 'false'\n            )\n          }\n          data-testid={`${dataTestId}-checkbox-marketing-consent`}\n        />\n        <label\n          htmlFor=\"simple-leadform-marketing-consent\"\n          className=\"simple-leadform-checkbox-label\"\n          data-testid={`${dataTestId}-label-marketing-consent`}\n        >\n          {marketingConsentText}\n        </label>\n      </div>\n    )\n  }\n\n  return consentFields\n}\n\nfunction generateDeviceFingerprint(): DeviceFingerprint {\n  if (typeof window === 'undefined') {\n    return {\n      screen: '',\n      timezone: '',\n      language: '',\n      platform: '',\n      cookieEnabled: false,\n      doNotTrack: null,\n    }\n  }\n\n  return {\n    screen: `${window.screen.width}x${window.screen.height}`,\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || '',\n    language: navigator.language || '',\n    platform: navigator.platform || '',\n    cookieEnabled: navigator.cookieEnabled || false,\n    doNotTrack: navigator.doNotTrack,\n  }\n}\n\nasync function getClientIP(): Promise<string | undefined> {\n  try {\n    // Try to get IP from a public service\n    const response = await fetch('https://api.ipify.org?format=json')\n    const data = await response.json()\n    return data.ip\n  } catch (error) {\n    // Fallback: try another service\n    try {\n      const response = await fetch('https://ipapi.co/json/')\n      const data = await response.json()\n      return data.ip\n    } catch (fallbackError) {\n      console.warn('Could not determine client IP address')\n      return undefined\n    }\n  }\n}\n\nasync function generateConsentEvent(\n  formData: LeadFormData,\n  config: LeadFormConfig\n): Promise<ConsentEvent | null> {\n  if (!config.requireConsent && !config.requireMarketingConsent) {\n    return null\n  }\n\n  const ip = await getClientIP()\n\n  return {\n    timestamp: new Date().toISOString(),\n    consentGiven: true,\n    marketingConsentRequested: config.requireMarketingConsent,\n    marketingConsentText: marketingConsentText,\n    marketingConsentGiven: formData.marketingConsent === 'true',\n    consentText: consentText,\n    ip: ip,\n    userAgent: navigator.userAgent || '',\n  }\n}\n\nasync function submitFormData(\n  config: LeadFormConfig,\n  formData: LeadFormData,\n  submissionStartTime: number | null,\n  mockSubmit: boolean\n) {\n  // todo: fix api endpoint\n  const apiEndpoint = config.apiEndpoint || 'https://api.loubase.com/v1/leads'\n\n  // Calculate submission time if available\n  const submissionTime = submissionStartTime\n    ? Date.now() - submissionStartTime\n    : null\n\n  const idempotencyKey = generateIdempotencyKey()\n  // Prepare submission data\n  const submissionData: CaptureLeadPayload = {\n    siteSlug: config.siteSlug,\n    sitePublicKey: config.sitePublicKey,\n    formData,\n    consentEvent: await generateConsentEvent(formData, config),\n    deviceFingerprint: generateDeviceFingerprint(),\n    source: 'react-form',\n    timestamp: new Date().toISOString(),\n    submissionTime,\n    userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : '',\n    url: typeof window !== 'undefined' ? window.location.href : '',\n    idempotencyKey,\n  }\n\n  if (mockSubmit) {\n    return {\n      success: true,\n      message: 'Form submitted successfully',\n    }\n  }\n\n  try {\n    const response = await fetch(apiEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'X-Idempotency-Key': idempotencyKey,\n      },\n      body: JSON.stringify(submissionData),\n    })\n\n    if (!response.ok) {\n      const errorText = await response.text()\n      throw new Error(`HTTP ${response.status}: ${errorText}`)\n    }\n\n    const result = await response.json()\n    return result\n  } catch (error) {\n    // Log error for debugging\n    console.error('Lead form submission error:', error)\n    throw error\n  }\n}\n\n// Types are exported from the main export statement above\n","export type LeadFormWidgetConfig = LeadFormConfig & {\n  position: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left' | 'center'\n  closeButtonLabel?: string\n}\n\nexport interface LeadFormConfig {\n  // payload\n  siteSlug: string\n  sitePublicKey: string\n  // UI\n  theme: 'light' | 'dark' | 'auto'\n  fields: string[]\n  title: string | undefined\n  buttonText: string\n  successMessage: string\n  requireConsent: boolean\n  requireMarketingConsent: boolean\n  accentColorHex: string\n  subtitle?: string | undefined\n  nameFieldLabel?: string\n  emailFieldLabel?: string\n  companyFieldLabel?: string\n  phoneFieldLabel?: string\n  messageFieldLabel?: string\n  nameFieldPlaceholder?: string\n  emailFieldPlaceholder?: string\n  companyFieldPlaceholder?: string\n  phoneFieldPlaceholder?: string\n  messageFieldPlaceholder?: string\n  successTitle?: string\n  successSubtitle?: string\n  // non adjustable by clients\n  apiEndpoint?: string\n}\n\nexport interface LeadFormData {\n  name?: string\n  email?: string\n  company?: string\n  message?: string\n  phone?: string\n  consent?: string\n  marketingConsent?: string\n  [key: string]: string | undefined\n}\n\nexport interface ConsentEvent {\n  timestamp: string\n  ip?: string\n  userAgent: string\n  consentText: string\n  consentGiven: boolean\n  marketingConsentRequested: boolean\n  marketingConsentText: string | undefined\n  marketingConsentGiven: boolean | undefined\n}\n\nexport interface DeviceFingerprint {\n  screen: string\n  timezone: string\n  language: string\n  platform: string\n  cookieEnabled: boolean\n  doNotTrack: string | null\n}\n\nexport interface CaptureLeadPayload {\n  siteSlug: string\n  sitePublicKey: string\n  formData: LeadFormData\n  consentEvent: ConsentEvent | null\n  deviceFingerprint: DeviceFingerprint\n  source: 'embed' | 'react-form'\n  submissionTime: number | null\n  userAgent: string\n  timestamp: string\n  url: string\n  idempotencyKey: string\n}\n\nexport const consentText =\n  'We value your privacy. By submitting this form, you consent to us storing your details for the purpose of responding to your request.'\nexport const marketingConsentText =\n  'I agree to receive marketing communications relevant to my request. I understand I can unsubscribe at any time.'\n\nexport const generateIdempotencyKey = (): string => {\n  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n}\n\n// Email validation function\nexport function validateEmail(email: string): boolean {\n  if (!email || email.trim() === '') {\n    return false\n  }\n\n  // Basic RFC 5322 compliant email regex\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email.trim())\n}\n\n// Phone validation function\nexport function validatePhone(phone: string): boolean {\n  if (!phone || phone.trim() === '') {\n    return false\n  }\n\n  // Remove all non-digit characters except + for international prefix\n  const cleanPhone = phone.replace(/[^\\d+]/g, '')\n\n  // Extract digits only for length validation\n  const digits = cleanPhone.replace(/[^\\d]/g, '')\n\n  // Check length constraints\n  if (digits.length < 10 || digits.length > 15) {\n    return false\n  }\n\n  // Validate different phone number formats\n  let isValid = false\n\n  if (digits.length === 10) {\n    // US domestic format validation (area code can't start with 0 or 1)\n    isValid = /^[2-9]\\d{2}[2-9]\\d{6}$/.test(digits)\n  } else if (digits.length === 11 && digits[0] === '1') {\n    // US format with country code\n    isValid = /^1[2-9]\\d{2}[2-9]\\d{6}$/.test(digits)\n  } else if (digits.length >= 11 && digits.length <= 15) {\n    // International format - basic validation\n    isValid = /^\\d{7,15}$/.test(digits)\n  }\n\n  // Additional checks for obviously invalid patterns\n  if (isValid) {\n    // Check for repeated digits (likely fake numbers like 1111111111)\n    if (/^(\\d)\\1{6,}$/.test(digits)) {\n      return false\n    }\n\n    // Check for sequential digits (123456789, 987654321, etc.)\n    const sequentialPatterns = [\n      '012345',\n      '123456',\n      '234567',\n      '345678',\n      '456789',\n      '567890',\n      '654321',\n      '543210',\n      '432109',\n      '321098',\n      '210987',\n      '109876',\n      '098765',\n    ]\n\n    for (const pattern of sequentialPatterns) {\n      if (digits.includes(pattern)) {\n        return false\n      }\n    }\n  }\n\n  return isValid\n}\n"],"mappings":"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","names":["style","_a"]}