{"version":3,"sources":["../src/types.ts","../src/index.ts"],"sourcesContent":["export type LeadFormWidgetConfig = LeadFormConfig & {\n  position: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left' | 'center'\n  closeButtonLabel?: string\n}\n\nexport interface LeadFormConfig {\n  // payload\n  siteSlug: string\n  sitePublicKey: string\n  // UI\n  theme: 'light' | 'dark' | 'auto'\n  fields: string[]\n  title: string | undefined\n  buttonText: string\n  successMessage: string\n  requireConsent: boolean\n  requireMarketingConsent: boolean\n  accentColorHex: string\n  subtitle?: string | undefined\n  nameFieldLabel?: string\n  emailFieldLabel?: string\n  companyFieldLabel?: string\n  phoneFieldLabel?: string\n  messageFieldLabel?: string\n  nameFieldPlaceholder?: string\n  emailFieldPlaceholder?: string\n  companyFieldPlaceholder?: string\n  phoneFieldPlaceholder?: string\n  messageFieldPlaceholder?: string\n  successTitle?: string\n  successSubtitle?: string\n  // non adjustable by clients\n  apiEndpoint?: string\n}\n\nexport interface LeadFormData {\n  name?: string\n  email?: string\n  company?: string\n  message?: string\n  phone?: string\n  consent?: string\n  marketingConsent?: string\n  [key: string]: string | undefined\n}\n\nexport interface ConsentEvent {\n  timestamp: string\n  ip?: string\n  userAgent: string\n  consentText: string\n  consentGiven: boolean\n  marketingConsentRequested: boolean\n  marketingConsentText: string | undefined\n  marketingConsentGiven: boolean | undefined\n}\n\nexport interface DeviceFingerprint {\n  screen: string\n  timezone: string\n  language: string\n  platform: string\n  cookieEnabled: boolean\n  doNotTrack: string | null\n}\n\nexport interface CaptureLeadPayload {\n  siteSlug: string\n  sitePublicKey: string\n  formData: LeadFormData\n  consentEvent: ConsentEvent | null\n  deviceFingerprint: DeviceFingerprint\n  source: 'embed' | 'react-form'\n  submissionTime: number | null\n  userAgent: string\n  timestamp: string\n  url: string\n  idempotencyKey: string\n}\n\nexport const consentText =\n  'We value your privacy. By submitting this form, you consent to us storing your details for the purpose of responding to your request.'\nexport const marketingConsentText =\n  'I agree to receive marketing communications relevant to my request. I understand I can unsubscribe at any time.'\n\nexport const generateIdempotencyKey = (): string => {\n  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n}\n\n// Email validation function\nexport function validateEmail(email: string): boolean {\n  if (!email || email.trim() === '') {\n    return false\n  }\n\n  // Basic RFC 5322 compliant email regex\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email.trim())\n}\n\n// Phone validation function\nexport function validatePhone(phone: string): boolean {\n  if (!phone || phone.trim() === '') {\n    return false\n  }\n\n  // Remove all non-digit characters except + for international prefix\n  const cleanPhone = phone.replace(/[^\\d+]/g, '')\n\n  // Extract digits only for length validation\n  const digits = cleanPhone.replace(/[^\\d]/g, '')\n\n  // Check length constraints\n  if (digits.length < 10 || digits.length > 15) {\n    return false\n  }\n\n  // Validate different phone number formats\n  let isValid = false\n\n  if (digits.length === 10) {\n    // US domestic format validation (area code can't start with 0 or 1)\n    isValid = /^[2-9]\\d{2}[2-9]\\d{6}$/.test(digits)\n  } else if (digits.length === 11 && digits[0] === '1') {\n    // US format with country code\n    isValid = /^1[2-9]\\d{2}[2-9]\\d{6}$/.test(digits)\n  } else if (digits.length >= 11 && digits.length <= 15) {\n    // International format - basic validation\n    isValid = /^\\d{7,15}$/.test(digits)\n  }\n\n  // Additional checks for obviously invalid patterns\n  if (isValid) {\n    // Check for repeated digits (likely fake numbers like 1111111111)\n    if (/^(\\d)\\1{6,}$/.test(digits)) {\n      return false\n    }\n\n    // Check for sequential digits (123456789, 987654321, etc.)\n    const sequentialPatterns = [\n      '012345',\n      '123456',\n      '234567',\n      '345678',\n      '456789',\n      '567890',\n      '654321',\n      '543210',\n      '432109',\n      '321098',\n      '210987',\n      '109876',\n      '098765',\n    ]\n\n    for (const pattern of sequentialPatterns) {\n      if (digits.includes(pattern)) {\n        return false\n      }\n    }\n  }\n\n  return isValid\n}\n","/**\n * LeadForm Embeddable Widget\n * A simple floating lead capture form that can be embedded on any website\n */\n\nimport {\n  CaptureLeadPayload,\n  ConsentEvent,\n  DeviceFingerprint,\n  LeadFormData,\n  LeadFormWidgetConfig,\n  consentText,\n  generateIdempotencyKey,\n  marketingConsentText,\n  validateEmail,\n  validatePhone,\n} from './types'\nexport type EventType = 'open' | 'close' | 'submit' | 'error'\n\nclass LeadFormWidget {\n  private config: LeadFormWidgetConfig\n  private container: HTMLDivElement\n  private isVisible: boolean = false\n  private isSubmitting: boolean = false\n  private formStartTime: number = 0\n  private idempotencyKey: string = ''\n  private deviceFingerprint: DeviceFingerprint\n  private eventListeners: Map<EventType, Set<Function>> = new Map()\n  private consentText: string\n  private marketingConsentText: string\n\n  constructor(config: LeadFormWidgetConfig) {\n    this.config = this.validateConfig(config)\n    this.container = document.createElement('div')\n    this.deviceFingerprint = this.generateDeviceFingerprint()\n    this.validateOrigin()\n    this.init()\n    document.addEventListener('keydown', this.onKeydown)\n    this.consentText = consentText\n    this.marketingConsentText = marketingConsentText\n  }\n\n  private onKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Escape' && this.isVisible) {\n      this.hide()\n    }\n  }\n\n  private validateConfig(config: LeadFormWidgetConfig): LeadFormWidgetConfig {\n    if (!config.siteSlug) {\n      throw new Error('LeadForm: siteSlug is required')\n    }\n    if (!config.sitePublicKey) {\n      throw new Error('LeadForm: sitePublicKey is required')\n    }\n\n    return {\n      ...config,\n      // Set defaults for configurable text\n      subtitle:\n        config.subtitle ||\n        \"We'd love to hear from you. Send us a message and we'll respond as soon as possible.\",\n      closeButtonLabel: config.closeButtonLabel || 'Close',\n      nameFieldLabel: config.nameFieldLabel || 'Name',\n      emailFieldLabel: config.emailFieldLabel || 'Email',\n      companyFieldLabel: config.companyFieldLabel || 'Company',\n      phoneFieldLabel: config.phoneFieldLabel || 'Phone',\n      messageFieldLabel: config.messageFieldLabel || 'Message',\n      nameFieldPlaceholder: config.nameFieldPlaceholder || 'Your name',\n      emailFieldPlaceholder:\n        config.emailFieldPlaceholder || 'your.email@example.com',\n      companyFieldPlaceholder: config.companyFieldPlaceholder || 'Your company',\n      phoneFieldPlaceholder: config.phoneFieldPlaceholder || '(555) 123-4567',\n      messageFieldPlaceholder:\n        config.messageFieldPlaceholder || 'Tell us about your project...',\n      successTitle: config.successTitle || config.successMessage || 'Success',\n      successSubtitle: config.successSubtitle || \"We'll get back to you soon!\",\n    }\n  }\n\n  private validateOrigin(): void {\n    const origin = window.location.origin\n    const protocol = window.location.protocol\n\n    if (\n      protocol !== 'https:' &&\n      protocol !== 'http:' &&\n      origin !== 'http://localhost:3000'\n    ) {\n      console.warn('LeadForm: HTTPS is required for production use')\n    }\n  }\n\n  private generateDeviceFingerprint(): DeviceFingerprint {\n    return {\n      screen: `${screen.width}x${screen.height}`,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      language: navigator.language,\n      platform: navigator.platform,\n      cookieEnabled: navigator.cookieEnabled,\n      doNotTrack: navigator.doNotTrack,\n    }\n  }\n\n  private emit(event: EventType, data?: any): void {\n    const listeners = this.eventListeners.get(event)\n    if (listeners) {\n      listeners.forEach(callback => {\n        try {\n          callback(data)\n        } catch (error) {\n          console.error(`Error in ${event} event listener:`, error)\n        }\n      })\n    }\n  }\n\n  public on(event: EventType, callback: Function): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, new Set())\n    }\n    this.eventListeners.get(event)!.add(callback)\n  }\n\n  public off(event: EventType, callback: Function): void {\n    const listeners = this.eventListeners.get(event)\n    if (listeners) {\n      listeners.delete(callback)\n    }\n  }\n\n  private init(): void {\n    this.injectStyles()\n    this.createForm()\n    this.createFloatingTrigger()\n    this.attachEventListeners()\n\n    document.body.appendChild(this.container)\n  }\n\n  private injectStyles(): void {\n    // Check if styles are already injected\n    if (document.getElementById('leadform-widget-styles')) {\n      return\n    }\n\n    const style = document.createElement('style')\n    style.id = 'leadform-widget-styles'\n    const accentColor =\n      this.normalizeColor(this.config.accentColorHex) || '#3b82f6'\n\n    style.textContent = `\n      .leadform-widget {\n        --leadform-primary: ${accentColor};\n        --leadform-primary-foreground: #ffffff;\n        --leadform-background: #ffffff;\n        --leadform-foreground: #0f172a;\n        --leadform-muted: #f8fafc;\n        --leadform-muted-foreground: #64748b;\n        --leadform-border: #e2e8f0;\n        --leadform-input: #ffffff;\n        --leadform-ring: var(--leadform-primary);\n        --leadform-destructive: #ef4444;\n        --leadform-destructive-foreground: #ffffff;\n        \n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n        font-size: 14px;\n        line-height: 1.5;\n        color: var(--leadform-foreground);\n        box-sizing: border-box;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        .leadform-widget[data-theme=\"auto\"] {\n          --leadform-background: #0f172a;\n          --leadform-foreground: #f8fafc;\n          --leadform-muted: #1e293b;\n          --leadform-muted-foreground: #94a3b8;\n          --leadform-border: #334155;\n          --leadform-input: #1e293b;\n        }\n      }\n\n      .leadform-widget[data-theme=\"dark\"] {\n        --leadform-background: #0f172a;\n        --leadform-foreground: #f8fafc;\n        --leadform-muted: #1e293b;\n        --leadform-muted-foreground: #94a3b8;\n        --leadform-border: #334155;\n        --leadform-input: #1e293b;\n      }\n\n      .leadform-widget * {\n        box-sizing: border-box;\n      }\n\n      .leadform-container {\n        position: fixed;\n        z-index: 999999;\n        background: var(--leadform-background);\n        border: 1px solid var(--leadform-border);\n        border-radius: 8px;\n        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n        padding: 24px;\n        width: 320px;\n        max-width: calc(100vw - 32px);\n        max-height: calc(100vh - 32px);\n        overflow-y: auto;\n        transform: translateY(100%);\n        opacity: 0;\n        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n        pointer-events: none;\n        visibility: hidden;\n      }\n\n      .leadform-container.visible {\n        transform: translateY(0);\n        opacity: 1;\n        pointer-events: auto;\n        visibility: visible;\n      }\n\n      .leadform-container.bottom-right {\n        bottom: 16px;\n        right: 16px;\n      }\n\n      .leadform-container.bottom-left {\n        bottom: 16px;\n        left: 16px;\n      }\n\n      .leadform-container.top-right {\n        top: 16px;\n        right: 16px;\n        transform: translateY(-100%);\n      }\n\n      .leadform-container.top-right.visible {\n        transform: translateY(0);\n      }\n\n      .leadform-container.top-left {\n        top: 16px;\n        left: 16px;\n        transform: translateY(-100%);\n      }\n\n      .leadform-container.top-left.visible {\n        transform: translateY(0);\n      }\n\n      .leadform-container.center {\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%) scale(0.95);\n      }\n\n      .leadform-container.center.visible {\n        transform: translate(-50%, -50%) scale(1);\n      }\n\n      .leadform-trigger {\n        position: fixed;\n        bottom: 24px;\n        right: 24px;\n        width: 56px;\n        height: 56px;\n        border-radius: 50%;\n        background: var(--leadform-primary);\n        color: var(--leadform-primary-foreground);\n        border: none;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        transition: all 0.3s ease;\n        z-index: 999998;\n      }\n\n      .leadform-trigger:hover {\n        transform: scale(1.1);\n        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);\n      }\n\n      .leadform-header {\n        margin-bottom: 24px;\n        text-align: left;\n      }\n\n      .leadform-title {\n        font-size: 18px;\n        font-weight: 600;\n        margin: 0 0 8px 0;\n        color: var(--leadform-foreground);\n      }\n\n      .leadform-subtitle {\n        font-size: 14px;\n        color: var(--leadform-muted-foreground);\n        margin: 0;\n        line-height: 1.4;\n      }\n\n      .leadform-close {\n        position: absolute;\n        top: 12px;\n        right: 12px;\n        background: none;\n        border: none;\n        color: var(--leadform-muted-foreground);\n        cursor: pointer;\n        padding: 4px;\n        border-radius: 4px;\n        transition: color 0.2s ease;\n      }\n\n      .leadform-close:hover {\n        color: var(--leadform-foreground);\n      }\n\n      .leadform-form {\n        display: flex;\n        flex-direction: column;\n        gap: 20px;\n      }\n\n      .leadform-field {\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n      }\n\n      .leadform-field.hidden {\n        position: absolute;\n        left: -9999px;\n        opacity: 0;\n        pointer-events: none;\n      }\n\n      .leadform-label {\n        font-size: 14px;\n        font-weight: 500;\n        color: var(--leadform-foreground);\n      }\n\n      .leadform-input {\n        padding: 12px 16px;\n        border: 1px solid var(--leadform-border);\n        border-radius: 8px;\n        background: var(--leadform-input);\n        color: var(--leadform-foreground);\n        font-size: 14px;\n        transition: border-color 0.2s ease, box-shadow 0.2s ease;\n      }\n\n      .leadform-input:focus {\n        outline: none;\n        border-color: var(--leadform-ring);\n        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n      }\n\n      .leadform-textarea {\n        resize: vertical;\n        min-height: 80px;\n      }\n\n      .leadform-checkbox-field {\n        flex-direction: row;\n        align-items: flex-start;\n        gap: 12px;\n      }\n\n      .leadform-checkbox {\n        margin-top: 2px;\n        width: 16px;\n        height: 16px;\n      }\n\n      .leadform-checkbox-label {\n        font-size: 12px;\n        color: var(--leadform-muted-foreground);\n        line-height: 1.4;\n      }\n\n      .leadform-submit {\n        background: var(--leadform-primary);\n        color: var(--leadform-primary-foreground);\n        border: none;\n        padding: 12px 24px;\n        border-radius: 6px;\n        font-size: 14px;\n        font-weight: 500;\n        cursor: pointer;\n        transition: background-color 0.2s ease;\n        position: relative;\n        margin-top: 8px;\n      }\n\n      .leadform-submit:hover:not(:disabled) {\n        filter: brightness(0.9);\n      }\n\n      .leadform-submit:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n\n      .leadform-submit-loading {\n        color: transparent;\n      }\n\n      .leadform-spinner {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        width: 16px;\n        height: 16px;\n        border: 2px solid transparent;\n        border-top: 2px solid var(--leadform-primary-foreground);\n        border-radius: 50%;\n        animation: leadform-spin 1s linear infinite;\n      }\n\n      @keyframes leadform-spin {\n        0% { transform: translate(-50%, -50%) rotate(0deg); }\n        100% { transform: translate(-50%, -50%) rotate(360deg); }\n      }\n\n      .leadform-success {\n        text-align: center;\n        padding: 20px;\n        color: var(--leadform-foreground);\n      }\n\n      .leadform-error {\n        color: var(--leadform-destructive);\n        font-size: 12px;\n        margin-top: 4px;\n      }\n\n      @media (max-width: 480px) {\n        .leadform-container {\n          width: calc(100vw - 32px);\n          margin: 16px;\n        }\n        \n        .leadform-container.bottom-right,\n        .leadform-container.bottom-left {\n          bottom: 0;\n          left: 16px;\n          right: 16px;\n          width: auto;\n        }\n      }\n    `\n    document.head.appendChild(style)\n  }\n\n  private normalizeColor(input?: string): string | null {\n    if (!input) return null\n    // Allow only hex colors (#rgb, #rrggbb, #rrggbbaa)\n    if (/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(input)) {\n      return input\n    }\n    // Use the browser to validate/normalize\n    const el = document.createElement('div')\n    el.style.color = ''\n    el.style.color = input\n    return el.style.color ? getComputedStyle(el).color : null\n  }\n\n  private createForm(): void {\n    this.formStartTime = Date.now()\n    this.idempotencyKey = generateIdempotencyKey()\n\n    this.container.className = 'leadform-widget'\n    this.container.setAttribute('data-theme', this.config.theme)\n\n    const formContainer = document.createElement('div')\n    formContainer.className = `leadform-container ${this.config.position}`\n\n    const honeypotField = `\n      <div class=\"leadform-field hidden\">\n        <label class=\"leadform-label\" for=\"leadform-website\">Website</label>\n        <input class=\"leadform-input\" type=\"text\" name=\"website\" id=\"leadform-website\" tabindex=\"-1\" autocomplete=\"off\">\n      </div>\n    `\n\n    const consentFields = this.generateConsentFields()\n\n    formContainer.innerHTML = `\n      <button class=\"leadform-close\" type=\"button\" aria-label=\"${this.config.closeButtonLabel}\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n        </svg>\n      </button>\n      <div class=\"leadform-header\">\n        <h3 class=\"leadform-title\">${this.config.title}</h3>\n        <p class=\"leadform-subtitle\">${this.config.subtitle}</p>\n      </div>\n      <form class=\"leadform-form\">\n        ${this.generateFields()}\n        ${honeypotField}\n        ${consentFields}\n        <button type=\"submit\" class=\"leadform-submit\">\n          <span class=\"leadform-submit-text\">${this.config.buttonText}</span>\n          <div class=\"leadform-spinner\" style=\"display: none;\"></div>\n        </button>\n      </form>\n    `\n\n    this.container.appendChild(formContainer)\n  }\n\n  private generateConsentFields(): string {\n    let consentFields = ''\n\n    // Required consent (privacy/data handling)\n    if (this.config.requireConsent) {\n      consentFields += `\n        <div class=\"leadform-field leadform-checkbox-field\">\n          <input type=\"checkbox\" id=\"leadform-consent\" name=\"consent\" class=\"leadform-checkbox\" required>\n          <label for=\"leadform-consent\" class=\"leadform-checkbox-label\">\n            ${this.consentText}\n          </label>\n        </div>\n      `\n    }\n\n    // Marketing consent (optional)\n    if (this.config.requireMarketingConsent) {\n      consentFields += `\n        <div class=\"leadform-field leadform-checkbox-field\" id=\"leadform-marketing-consent-field\" style=\"display: none;\">\n          <input type=\"checkbox\" id=\"leadform-marketing-consent\" name=\"marketingConsent\" class=\"leadform-checkbox\" checked>\n          <label for=\"leadform-marketing-consent\" class=\"leadform-checkbox-label\">\n            ${this.marketingConsentText}\n          </label>\n        </div>\n      `\n    }\n\n    return consentFields\n  }\n\n  private generateFields(): string {\n    const fieldMap: Record<\n      string,\n      { label: string; type: string; placeholder: string; required: boolean }\n    > = {\n      name: {\n        label: this.config.nameFieldLabel!,\n        type: 'text',\n        placeholder: this.config.nameFieldPlaceholder!,\n        required: true,\n      },\n      email: {\n        label: this.config.emailFieldLabel!,\n        type: 'email',\n        placeholder: this.config.emailFieldPlaceholder!,\n        required: true,\n      },\n      company: {\n        label: this.config.companyFieldLabel!,\n        type: 'text',\n        placeholder: this.config.companyFieldPlaceholder!,\n        required: false,\n      },\n      phone: {\n        label: this.config.phoneFieldLabel!,\n        type: 'tel',\n        placeholder: this.config.phoneFieldPlaceholder!,\n        required: false,\n      },\n      message: {\n        label: this.config.messageFieldLabel!,\n        type: 'textarea',\n        placeholder: this.config.messageFieldPlaceholder!,\n        required: false,\n      },\n    }\n\n    return this.config.fields\n      .map(fieldName => {\n        const field = fieldMap[fieldName]\n        if (!field) return ''\n\n        const isTextarea = field.type === 'textarea'\n        const fieldId = `leadform-${fieldName}`\n        const inputElement = isTextarea\n          ? `<textarea class=\"leadform-input leadform-textarea\" name=\"${fieldName}\" id=\"${fieldId}\" placeholder=\"${field.placeholder}\" ${field.required ? 'required' : ''}></textarea>`\n          : `<input class=\"leadform-input\" type=\"${field.type}\" name=\"${fieldName}\" id=\"${fieldId}\" placeholder=\"${field.placeholder}\" ${field.required ? 'required' : ''}>`\n\n        return `\n        <div class=\"leadform-field\">\n          <label class=\"leadform-label\" for=\"${fieldId}\">${field.label}${field.required ? ' *' : ''}</label>\n          ${inputElement}\n          <div class=\"leadform-error\" id=\"${fieldId}-error\"></div>\n        </div>\n      `\n      })\n      .join('')\n  }\n\n  private createFloatingTrigger(): void {\n    const trigger = document.createElement('button')\n    trigger.className = 'leadform-trigger'\n    trigger.innerHTML = `\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n        <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\n      </svg>\n    `\n    trigger.setAttribute('aria-label', 'Open contact form')\n\n    trigger.addEventListener('click', () => this.toggle())\n    this.container.appendChild(trigger)\n  }\n\n  private attachEventListeners(): void {\n    const form = this.container.querySelector(\n      '.leadform-form'\n    ) as HTMLFormElement\n    const closeButton = this.container.querySelector(\n      '.leadform-close'\n    ) as HTMLButtonElement\n\n    if (closeButton) {\n      closeButton.addEventListener('click', () => this.hide())\n    }\n\n    if (form) {\n      form.addEventListener('submit', e => this.handleSubmit(e))\n    }\n\n    // Listen for email input changes to show/hide marketing consent\n    if (this.config.requireMarketingConsent) {\n      const emailInput = this.container.querySelector(\n        'input[name=\"email\"]'\n      ) as HTMLInputElement\n      if (emailInput) {\n        emailInput.addEventListener('input', () => this.handleEmailChange())\n        emailInput.addEventListener('blur', () => this.handleEmailChange())\n      }\n    }\n  }\n\n  private handleEmailChange(): void {\n    const emailInput = this.container.querySelector(\n      'input[name=\"email\"]'\n    ) as HTMLInputElement\n    const marketingConsentField = this.container.querySelector(\n      '#leadform-marketing-consent-field'\n    ) as HTMLDivElement\n\n    if (!emailInput || !marketingConsentField) return\n\n    const email = emailInput.value\n    const isValidEmail = validateEmail(email)\n\n    if (isValidEmail) {\n      marketingConsentField.style.display = 'flex'\n    } else {\n      marketingConsentField.style.display = 'none'\n    }\n  }\n\n  private async handleSubmit(e: Event): Promise<void> {\n    e.preventDefault()\n\n    if (this.isSubmitting) return\n\n    const form = e.target as HTMLFormElement\n    const formData = new FormData(form)\n    const data: LeadFormData = {}\n\n    // Clear previous errors\n    this.clearErrors()\n\n    // Check honeypot field\n    const honeypotValue = formData.get('website') as string\n    if (honeypotValue && honeypotValue.trim() !== '') {\n      console.warn('LeadForm: Honeypot field filled, likely spam')\n      this.showError('Honeypot field filled')\n      this.emit('error', { type: 'honeypot', message: 'Honeypot field filled' })\n      return\n    }\n\n    // Check submission timing\n    const submissionTime = Date.now() - this.formStartTime\n    if (submissionTime < 3000) {\n      console.warn('LeadForm: Form submitted too quickly, likely spam')\n      this.showError('Form submitted too quickly')\n      this.emit('error', {\n        type: 'timing',\n        message: 'Form submitted too quickly',\n      })\n      return\n    }\n\n    // Get marketing consent status\n    const marketingConsentGiven = formData.get('marketingConsent') === 'on'\n\n    // Collect form data (excluding honeypot and consent checkboxes)\n    formData.forEach((value, key) => {\n      if (\n        key !== 'consent' &&\n        key !== 'marketingConsent' &&\n        key !== 'website'\n      ) {\n        data[key] = value as string\n      }\n    })\n\n    // Basic validation\n    if (!this.validateForm(data)) {\n      this.emit('error', {\n        type: 'validation',\n        message: 'Form validation failed',\n      })\n      return\n    }\n\n    this.setSubmitting(true)\n\n    try {\n      const result = await this.submitLead(\n        data,\n        this.config.requireConsent\n          ? {\n              timestamp: new Date().toISOString(),\n              userAgent: navigator.userAgent,\n              consentGiven: true,\n              marketingConsentRequested: this.config.requireMarketingConsent,\n              consentText: this.consentText,\n              marketingConsentText: this.marketingConsentText,\n              marketingConsentGiven,\n            }\n          : null\n      )\n\n      this.emit('submit', { data, result })\n      this.showSuccess()\n      // Auto-hide after success\n      setTimeout(() => this.hide(), 3000)\n    } catch (error) {\n      this.showError('Failed to submit form')\n      this.emit('error', {\n        type: 'submission',\n        message: 'Failed to submit form',\n        error,\n      })\n      console.error('Lead form submission error:', error)\n    } finally {\n      this.setSubmitting(false)\n    }\n  }\n\n  private validateForm(data: LeadFormData): boolean {\n    let isValid = true\n\n    // Check if form includes email and/or phone fields\n    const hasEmailField = this.config.fields.includes('email')\n    const hasPhoneField = this.config.fields.includes('phone')\n\n    // Individual field validation\n    this.config.fields.forEach(fieldName => {\n      const fieldMap: Record<\n        string,\n        { required: boolean; validate?: (value: string) => boolean }\n      > = {\n        name: { required: true },\n        email: {\n          required: true,\n          validate: (value: string) => validateEmail(value),\n        },\n        company: { required: false },\n        phone: {\n          required: false,\n          validate: (value: string) => validatePhone(value),\n        },\n        message: { required: false },\n      }\n\n      const field = fieldMap[fieldName]\n      const value = data[fieldName] || ''\n\n      // Skip required check for email and phone if we need to validate them together\n      const skipRequiredCheck =\n        (fieldName === 'email' || fieldName === 'phone') &&\n        hasEmailField &&\n        hasPhoneField\n\n      if (field?.required && !skipRequiredCheck && !value.trim()) {\n        this.showFieldError(fieldName, 'This field is required')\n        isValid = false\n      } else if (value && field?.validate && !field.validate(value)) {\n        if (fieldName === 'email') {\n          this.showFieldError(fieldName, 'Please enter a valid email address')\n        } else if (fieldName === 'phone') {\n          this.showFieldError(fieldName, 'Please enter a valid phone number')\n        }\n        isValid = false\n      }\n    })\n\n    // Special validation: if both email and phone are present, require at least one\n    if (hasEmailField && hasPhoneField) {\n      const email = data.email || ''\n      const phone = data.phone || ''\n\n      const hasValidEmail = email.trim() && validateEmail(email)\n      const hasValidPhone = phone.trim() && validatePhone(phone)\n\n      if (!hasValidEmail && !hasValidPhone) {\n        this.showFieldError(\n          'email',\n          'Please provide either a valid email or phone number'\n        )\n        this.showFieldError(\n          'phone',\n          'Please provide either a valid email or phone number'\n        )\n        isValid = false\n      }\n    }\n\n    return isValid\n  }\n\n  private showFieldError(fieldName: string, message: string): void {\n    const errorElement = this.container.querySelector(\n      `#leadform-${fieldName}-error`\n    ) as HTMLDivElement\n    if (errorElement) {\n      errorElement.textContent = message\n    }\n  }\n\n  private clearErrors(): void {\n    const errorElements = this.container.querySelectorAll('.leadform-error')\n    errorElements.forEach(element => {\n      element.textContent = ''\n    })\n  }\n\n  private showError(message: string): void {\n    console.error(message)\n  }\n\n  private setSubmitting(isSubmitting: boolean): void {\n    this.isSubmitting = isSubmitting\n    const submitButton = this.container.querySelector(\n      '.leadform-submit'\n    ) as HTMLButtonElement\n    const spinner = this.container.querySelector(\n      '.leadform-spinner'\n    ) as HTMLDivElement\n\n    if (submitButton) {\n      submitButton.disabled = isSubmitting\n      if (isSubmitting) {\n        submitButton.classList.add('leadform-submit-loading')\n        spinner.style.display = 'block'\n      } else {\n        submitButton.classList.remove('leadform-submit-loading')\n        spinner.style.display = 'none'\n      }\n    }\n  }\n\n  private async submitLead(\n    data: LeadFormData,\n    consentEvent: ConsentEvent | null\n  ): Promise<void> {\n    const apiEndpoint =\n      this.config.apiEndpoint || 'https://api.loubase.com/leads'\n\n    const payload: CaptureLeadPayload = {\n      siteSlug: this.config.siteSlug,\n      sitePublicKey: this.config.sitePublicKey,\n      formData: data,\n      source: 'embed',\n      timestamp: new Date().toISOString(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      deviceFingerprint: this.deviceFingerprint,\n      consentEvent,\n      submissionTime: Date.now() - this.formStartTime,\n      idempotencyKey: this.idempotencyKey,\n    }\n\n    const response = await fetch(apiEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Idempotency-Key': this.idempotencyKey,\n      },\n      body: JSON.stringify(payload),\n    })\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n\n    return response.json()\n  }\n\n  private showSuccess(): void {\n    const formContainer = this.container.querySelector(\n      '.leadform-container'\n    ) as HTMLDivElement\n    formContainer.innerHTML = `\n      <button class=\"leadform-close\" aria-label=\"${this.config.closeButtonLabel}\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n        </svg>\n      </button>\n      <div class=\"leadform-success\">\n        <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" style=\"margin: 0 auto 16px; color: #22c55e;\">\n          <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n          <polyline points=\"22,4 12,14.01 9,11.01\"></polyline>\n        </svg>\n        <h3 style=\"margin: 0 0 8px 0;\">${this.config.successTitle}</h3>\n        <p style=\"margin: 0; color: var(--leadform-muted-foreground); font-size: 14px;\">${this.config.successSubtitle}</p>\n      </div>\n    `\n\n    // Attach close event listener for the success message\n    const closeButton = this.container.querySelector(\n      '.leadform-close'\n    ) as HTMLButtonElement\n    if (closeButton) {\n      closeButton.addEventListener('click', () => this.hide())\n    }\n  }\n\n  public show(): void {\n    const formContainer = this.container.querySelector(\n      '.leadform-container'\n    ) as HTMLDivElement\n    if (formContainer) {\n      formContainer.classList.add('visible')\n      formContainer.setAttribute('aria-hidden', 'false')\n      formContainer.setAttribute('role', 'dialog')\n      formContainer.setAttribute('aria-modal', 'true')\n    }\n\n    this.isVisible = true\n    this.emit('open')\n  }\n\n  public hide(): void {\n    const formContainer = this.container.querySelector(\n      '.leadform-container'\n    ) as HTMLDivElement\n    if (formContainer) {\n      formContainer.classList.remove('visible')\n      formContainer.setAttribute('aria-hidden', 'true')\n    }\n\n    this.isVisible = false\n    this.emit('close')\n  }\n\n  public toggle(): void {\n    if (this.isVisible) {\n      this.hide()\n    } else {\n      this.show()\n    }\n  }\n\n  public destroy(): void {\n    document.removeEventListener('keydown', this.onKeydown)\n\n    if (this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container)\n    }\n\n    // Remove styles if no other widgets exist\n    const existingWidgets = document.querySelectorAll('.leadform-widget')\n    if (existingWidgets.length === 0) {\n      const styleElement = document.getElementById('leadform-widget-styles')\n      if (styleElement) {\n        styleElement.remove()\n      }\n    }\n\n    this.eventListeners.clear()\n  }\n}\n\n// Global API\ndeclare global {\n  interface Window {\n    LeadFormWidget: typeof LeadFormWidget\n    LeadForm: {\n      open: () => void\n      close: () => void\n      on: (event: EventType, callback: Function) => void\n      destroy: () => void\n      version: string\n    }\n  }\n}\n\n// Global instance\nlet globalWidget: LeadFormWidget | null = null\n\n// Export LeadFormWidget for direct use\nwindow.LeadFormWidget = LeadFormWidget\n\nwindow.LeadForm = {\n  open: () => {\n    if (!globalWidget) {\n      const config = getConfigFromScript()\n      if (config) {\n        globalWidget = new LeadFormWidget(config)\n      }\n    }\n    globalWidget?.show()\n  },\n\n  close: () => {\n    globalWidget?.hide()\n  },\n\n  on: (event: EventType, callback: Function) => {\n    globalWidget?.on(event, callback)\n  },\n\n  destroy: () => {\n    globalWidget?.destroy()\n    globalWidget = null\n  },\n\n  version: '1.0.0',\n}\n\nfunction getConfigFromScript(): LeadFormWidgetConfig | null {\n  const scripts = document.querySelectorAll('script[data-site-id]')\n  const script = scripts[scripts.length - 1] as HTMLScriptElement\n\n  if (!script || !script.dataset.siteId) return null\n\n  if (!script.dataset.siteSlug || !script.dataset.sitePublicKey) return null\n\n  return {\n    siteSlug: script.dataset.siteSlug,\n    sitePublicKey: script.dataset.sitePublicKey,\n    theme: (script.dataset.theme as LeadFormWidgetConfig['theme']) || 'auto',\n    position:\n      (script.dataset.position as LeadFormWidgetConfig['position']) ||\n      'bottom-right',\n    fields: script.dataset.fields?.split(',') || ['name', 'email', 'message'],\n    title: script.dataset.title || 'Get in touch',\n    buttonText: script.dataset.buttonText || 'Contact us',\n    successMessage:\n      script.dataset.successMessage || \"Thanks — we'll reply ASAP.\",\n    requireConsent: script.dataset.requireConsent === 'true',\n    requireMarketingConsent: script.dataset.requireMarketingConsent === 'true',\n    accentColorHex: script.dataset.accentColorHex || '#3b82f6',\n    // configurable text fields\n    subtitle: script.dataset.subtitle,\n    closeButtonLabel: script.dataset.closeButtonLabel,\n    nameFieldLabel: script.dataset.nameFieldLabel,\n    emailFieldLabel: script.dataset.emailFieldLabel,\n    companyFieldLabel: script.dataset.companyFieldLabel,\n    phoneFieldLabel: script.dataset.phoneFieldLabel,\n    messageFieldLabel: script.dataset.messageFieldLabel,\n    nameFieldPlaceholder: script.dataset.nameFieldPlaceholder,\n    emailFieldPlaceholder: script.dataset.emailFieldPlaceholder,\n    companyFieldPlaceholder: script.dataset.companyFieldPlaceholder,\n    phoneFieldPlaceholder: script.dataset.phoneFieldPlaceholder,\n    messageFieldPlaceholder: script.dataset.messageFieldPlaceholder,\n    successTitle: script.dataset.successTitle,\n    successSubtitle: script.dataset.successSubtitle,\n    apiEndpoint: script.dataset.apiEndpoint,\n  }\n}\n\n// Auto-initialization from script tag attributes\nfunction initFromScript(): void {\n  const config = getConfigFromScript()\n  if (!config) return\n\n  globalWidget = new LeadFormWidget(config)\n}\n\n// Auto-init if DOM is ready, otherwise wait\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initFromScript)\n} else {\n  initFromScript()\n}\n\nexport { LeadFormWidget, type LeadFormData, type LeadFormWidgetConfig }\n"],"mappings":"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","names":["consentText","marketingConsentText","generateIdempotencyKey","validateEmail","email","validatePhone","phone","digits","isValid","sequentialPatterns","pattern","LeadFormWidget","config","consentText","marketingConsentText","origin","protocol","event","data","listeners","callback","error","style","accentColor","input","el","generateIdempotencyKey","formContainer","honeypotField","consentFields","fieldMap","fieldName","field","isTextarea","fieldId","inputElement","trigger","form","closeButton","e","emailInput","marketingConsentField","email","validateEmail","formData","honeypotValue","marketingConsentGiven","value","key","result","isValid","hasEmailField","hasPhoneField","validatePhone","skipRequiredCheck","phone","hasValidEmail","hasValidPhone","message","errorElement","element","isSubmitting","submitButton","spinner","consentEvent","apiEndpoint","payload","response","styleElement","globalWidget","getConfigFromScript","_a","scripts","script","initFromScript"]}